package hello.spring.repository.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.sql.DataSource;

import org.springframework.jdbc.datasource.DataSourceUtils;

import hello.spring.domain.Member;
import hello.spring.repository.MemberRepository;

public class JdbcMemberRepository implements MemberRepository{

	/**
	 * DataSource
	 * - Java에서 제공하는 DB와의 컨넥션을 관리하는 인터페이스이다.
	 * - DB 연결 정보를 저장하고, Connection을 생성하고, Connection Pool에 등록하고, 관리하는 역할을 담당한다.
	 */
	private final DataSource dataSource;
	
	public JdbcMemberRepository(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	@Override
	public Member save(Member member) {
		
		String sql = "insert into member (name) values (?)";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();	// JDBC 컨넥션을 얻어온다.
			/**
			 * Statement.RETURN_GENERATED_KEYS
			 *  · DB에서 자동 생성한 ID(KEY) 값을 자동으로 가지고 오는 옵션
			 *  · 단, DB에 자동증가 옵션이 있어야 한다.
			 *  	create table member
					(
					    id   bigint generated by default as identity,
					    name varchar(255),
					    primary key (id)
					); 
			 */
			pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, member.getName());	// 파라미터 맵핑
			pstmt.executeUpdate();	// SQL DB에 넘긴다.
			
			rs = pstmt.getGeneratedKeys();
			
			if(rs.next()) {
				member.setId(rs.getLong(1)); // columnIndex
			}else {
				throw new SQLException("id 조회 실패");
			}
			
			return member;
			
		} catch (Exception e) {
			throw new IllegalStateException(e);
		} finally {
			close(conn, pstmt, rs);
		}
	}

	private void close(Connection conn, PreparedStatement pstmt, ResultSet rs) {
		try {
			if (rs != null) {
				 rs.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		try {
			if (pstmt != null) {
				pstmt.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		if (conn != null) {
			close(conn);
		}
	}

	private void close(Connection conn) {
		DataSourceUtils.releaseConnection(conn, dataSource);
	}

	private Connection getConnection() {
		return DataSourceUtils.getConnection(dataSource);
	}

	@Override
	public Optional<Member> findById(Long id) {
		
		String sql = "select * from member where id = ?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();	// JDBC 컨넥션을 얻어온다.
			/**
			 * Statement.RETURN_GENERATED_KEYS
			 *  · DB에서 자동 생성한 ID(KEY) 값을 자동으로 가지고 오는 옵션
			 *  · 단, DB에 자동증가 옵션이 있어야 한다.
			 *  	create table member
					(
					    id   bigint generated by default as identity,
					    name varchar(255),
					    primary key (id)
					); 
			 */
			pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			pstmt.setLong(1, id);	// 파라미터 맵핑
			rs = pstmt.executeQuery();	// SQL DB에 넘긴다.
			
			if(rs.next()) {
				Member member = new Member();
				member.setId(rs.getLong("id"));  // columnLabel
				member.setName(rs.getString("name")); // columnLabel
				return Optional.of(member);
			}else {
				return Optional.empty();
			}
			
		} catch (Exception e) {
			throw new IllegalStateException(e);
		} finally {
			close(conn, pstmt, rs);
		}
	}

	@Override
	public Optional<Member> findByName(String name) {
		
		String sql = "select * from member where name = ?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();	// JDBC 컨넥션을 얻어온다.
			/**
			 * Statement.RETURN_GENERATED_KEYS
			 *  · DB에서 자동 생성한 ID(KEY) 값을 자동으로 가지고 오는 옵션
			 *  · 단, DB에 자동증가 옵션이 있어야 한다.
			 *  	create table member
					(
					    id   bigint generated by default as identity,
					    name varchar(255),
					    primary key (id)
					); 
			 */
			pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, name);	// 파라미터 맵핑
			rs = pstmt.executeQuery();	// SQL DB에 넘긴다.
			
			if(rs.next()) {
				Member member = new Member();
				member.setId(rs.getLong("id"));  // columnLabel
				member.setName(rs.getString("name")); // columnLabel
				return Optional.of(member);
			}else {
				return Optional.empty();
			}
			
		} catch (Exception e) {
			throw new IllegalStateException(e);
		} finally {
			close(conn, pstmt, rs);
		}
	}

	@Override
	public List<Member> findAll() {
		String sql = "select * from member";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();	// JDBC 컨넥션을 얻어온다.
			/**
			 * Statement.RETURN_GENERATED_KEYS
			 *  · DB에서 자동 생성한 ID(KEY) 값을 자동으로 가지고 오는 옵션
			 *  · 단, DB에 자동증가 옵션이 있어야 한다.
			 *  	create table member
					(
					    id   bigint generated by default as identity,
					    name varchar(255),
					    primary key (id)
					); 
			 */
			pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			rs = pstmt.executeQuery();	// SQL DB에 넘긴다.
			
			List<Member> members = new ArrayList<>();
			while(rs.next()) {
				Member member = new Member();
				member.setId(rs.getLong("id"));  // columnLabel
				member.setName(rs.getString("name")); // columnLabel
				members.add(member);
			}
			
			return members;
			
		} catch (Exception e) {
			throw new IllegalStateException(e);
		} finally {
			close(conn, pstmt, rs);
		}
	}

}
